1. Create a VPC

2. Create 6 Subnets
      - 2 Subnets for Web Server
      - 2 Subnets for App Server
      - 2 Subnets for Database

3. Create Route Tables
      - Public Route Table: Connects with Internet Gateway and 2 public subnets.
      - Private Route Table: Create Private Route table for eachsubnet and Map NatGateway from each Availability zone for High Availability
No NAT gateway for Database, because of security, If required for database patching, Map Natgateway to Database Route table later.

4. Create 3 Security Groups
      - WebServer-SG: Allows SSH (ALL), HTTP (ALL), HTTPS (ALL).
      - AppServer-SG: Allows 5000 from WebServer-SG, SSH from WebServer-SG, 80 from WebServer-SG, 443 from WebServer-SG.
      - DB-SG: Allows 3306 from AppServer-SG.

5. Create Route 53 (R53) domain in private Hosted Zone
    Create a record for that domain name.


6. if the domain is in public hosted zone, then we can get public SSL certificate by validating it with Amazon Certificate Manger
      beacuse of budget problem in my project i am using the domain hosted in privte hosted zone

7. Create RDS
Create a DB Subnet group at least 2 subnets needed.
Create a MySQL DB in a private subnet with DB-SG.

8. Create Web Server EC2
Launch an EC2 instance in the public subnet with WebServer-SG.

9. Create App Server EC2
Launch an EC2 instance in the private subnet with AppServer-SG.

10. Command to Login to App Server
             vi pro_key.pem
             chmod 400 pro_key.pem
             ssh -i pro_key.pem ec2-user@192.168.1.53

11. Setup Database
            sudo yum install mysql -y
            mysql -h prodb.cpk8oagkgyaz.us-east-1.rds.amazonaws.com -P 3306 -u admin -p
            Provide queries as below to create DB, tables, and insert data into the table.
show DATABASES;

use prodatabase;

CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(255) NOT NULL,
    email VARCHAR(100) NOT NULL
);

INSERT INTO users (username, password, email) 
VALUES 
('chandru', 'kvs123#', 'hellochandru@gmail.com'),
('vijay', 'vijay890', 'vijay@gmail.com'),
('raja', 'raja546', 'raja@gmail.com');

12. Setup App Server
sudo yum install python3 python3-pip -y
pip3 install flask flask-mysql-connector flask-cors
vi app.py

                      #########When you close your terminal (or get disconnected), the shell sends a SIGHUP (hangup) signal to its child processes.
nohup makes the process ignore SIGHUP, so it keeps running even after logout or terminal close.


nohup python3 app.py > output.log 2>&1 &      ### nohup --used to run the code even after the terminal end/closed in background  ### simply using only & stop the background process after terminal closed.
ps -ef | grep app.py

cat output.log 
curl http://10.0.3.47:5000/login


13. Setup Web Server
sudo yum install httpd -y
sudo service httpd start
cd /var/www/html/
touch index.html script.js styles.css

14. Create Application Load Balancer (ALB)
Create Backend Target Group for App Server EC2 with:
Port: 5000
Health Check Path: /login
Create Backend Load Balancer in the public subnet with:
Listener Port: 80
Attach the Target Group
Create Frontend Target Group for Web Server EC2 with:
Port: 80
Health Check Path: /
Create Frontend Load Balancer in the public subnet with:
Listener Port: 80
Attach the Target Group

15. Configure Route 53 to Load Balancer
Create an A record with alias pointing to the Frontend Load Balancer.

16. Attach ACM Certificate to Load Balancer
Tasks to be completed
 Instead of three Security Group create Five Security Group
 Create a Internal Load Balancer for AppServer
 Create a AutoScaling for Webserver & Appserver
 Using Cloudcraft/draw.io Draw a Three tier Diagram
 Read the 4 Part DR strategies document Click Me
